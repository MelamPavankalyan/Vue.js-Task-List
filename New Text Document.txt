Step 1: Set up your Vue.js project

You can set up a new Vue.js project using Vue CLI, or you can create a project manually. Ensure you have Vue.js and Vue CLI installed.


vue create task-list-app
cd task-list-app

Step 2: Create Vue Components

In your Vue project, create the necessary components for the Task List application.

TaskList.vue - Display a list of tasks.
TaskCreation.vue - Allow users to add new tasks to the list.
TaskDeletion.vue - Allow users to remove tasks from the list.
TaskFiltering.vue - Implement filtering options.

Step 3: Set up the Task List Component (TaskList.vue)

In TaskList.vue, you can use the following template structure:

<template>
  <div>
    <h2>Task List</h2>
    <ul>
      <li v-for="task in filteredTasks" :key="task.id">
        {{ task.title }}
        <button @click="deleteTask(task.id)">Delete</button>
      </li>
    </ul>
  </div>
</template>

<script>
export default {
  props: {
    tasks: Array, // Pass tasks as a prop
  },
  data() {
    return {
      filterCompleted: false,
    };
  },
  computed: {
    filteredTasks() {
      return this.filterCompleted
        ? this.tasks.filter((task) => task.completed)
        : this.tasks;
    },
  },
  methods: {
    deleteTask(taskId) {
      // Implement the logic to delete a task
    },
  },
};
</script>

Step 4: Task Creation Component (TaskCreation.vue)

In TaskCreation.vue, create a form to add new tasks. Ensure basic data validation.

<template>
  <div>
    <h2>Create Task</h2>
    <form @submit.prevent="addTask">
      <input v-model="newTask" placeholder="Task title" required />
      <button type="submit">Add Task</button>
    </form>
  </div>
</template>

<script>
export default {
  data() {
    return {
      newTask: "",
    };
  },
  methods: {
    addTask() {
      if (this.newTask.trim() !== "") {
        // Implement the logic to add a new task
        this.newTask = ""; // Clear the input field
      } else {
        // Handle validation error (e.g., display an error message)
      }
    },
  },
};
</script>

Step 5: Task Deletion Component (TaskDeletion.vue)

In TaskDeletion.vue, you can create a button to delete tasks.

<template>
  <div>
    <h2>Delete Task</h2>
    <button @click="deleteTasks">Delete Completed Tasks</button>
  </div>
</template>

<script>
export default {
  methods: {
    deleteTasks() {
      // Implement the logic to delete completed tasks
    },
  },
};
</script>

Step 6: Task Filtering Component (TaskFiltering.vue)

In TaskFiltering.vue, create options to filter tasks based on completion status.

<template>
  <div>
    <h2>Filter Tasks</h2>
    <label>
      <input type="checkbox" v-model="filterCompleted" /> Show Completed Tasks
    </label>
  </div>
</template>

<script>
export default {
  data() {
    return {
      filterCompleted: false,
    };
  },
};
</script>

Step 7: Integrate Components in App.vue

In your App.vue, integrate these components and manage the state (tasks).

Step 8: Add Error Handling

For error handling, you can use Vue's built-in error handling mechanisms or create custom error components. For example, you can display validation errors for task creation in TaskCreation.vue.

Step 9: Responsive Design

Ensure that your components are styled to be responsive using CSS or a CSS framework like Bootstrap or Tailwind CSS.

Step 10: Test and Debug

Test your application thoroughly to ensure all components and features work as expected. Use Vue DevTools for debugging.

This is a basic structure for your Vue.js task list application. You can expand upon this foundation to add more features and improve the user experience.




